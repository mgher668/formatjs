diff --git a/node_modules/@bazel/typescript/internal/ts_project.bzl b/node_modules/@bazel/typescript/internal/ts_project.bzl
index c0ccc81..29a3220 100755
--- a/node_modules/@bazel/typescript/internal/ts_project.bzl
+++ b/node_modules/@bazel/typescript/internal/ts_project.bzl
@@ -1,15 +1,19 @@
 "ts_project rule"
 
 load("@build_bazel_rules_nodejs//:providers.bzl", "DeclarationInfo", "NpmPackageInfo", "declaration_info", "js_module_info", "run_node")
-
+load("@build_bazel_rules_nodejs//internal/linker:link_node_modules.bzl", "module_mappings_aspect")
 _DEFAULT_TSC = (
     
     "//typescript/bin:tsc"
 )
 
 _ATTRS = {
+    "package_name": attr.string(),
     "args": attr.string_list(),
-    "deps": attr.label_list(providers = [DeclarationInfo]),
+    "deps": attr.label_list(
+        aspects = [module_mappings_aspect],
+        providers = [DeclarationInfo],
+    ),
     "extends": attr.label_list(allow_files = [".json"]),
     "outdir": attr.string(),
     # NB: no restriction on extensions here, because tsc sometimes adds type-check support
@@ -142,6 +146,14 @@ def _ts_project_impl(ctx):
     if len(typings_outputs) or len(ctx.attr.deps):
         providers.append(declaration_info(depset(typings_outputs), ctx.attr.deps))
     
+    if ctx.attr.package_name:
+        path = "/".join([p for p in [ctx.bin_dir.path, ctx.label.workspace_root, ctx.label.package] if p])
+        providers.append(LinkablePackageInfo(
+            package_name = ctx.attr.package_name,
+            path = path,
+            files = depset(typings_outputs, transitive = [runtime_outputs]),
+        ))
+
     return providers
 
 ts_project = rule(
